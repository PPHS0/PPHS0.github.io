javascript: (function () {

const config = {
  toggleKey: "`",
  burstKey: "0",
  incrementKey: "=",
  decrementKey: "-",
  remoteClickKey: "r",
  clicksPerBurst: 500,
  burstInterval: 0,
  normalInterval: 20,
  uiColor: "#000000",
  uiFontColor: "#ffffff",
  accentColor: "#000080", 
  threads: 8,
  remoteClickRadius: 50,
};

let clicking = false,
  bursting = false,
  cursorX = 0,
  cursorY = 0,
  ui,
  clickCount = 0,
  startTime,
  workers = [],
  clickMultiplier = 1,
  dragOffset = { x: 0, y: 0 },
  lastUpdateTime = 0,
  remoteClicking = false,
  collapsed = false,
  desiredCPS = 50,
  activeTab = "main",
  chatHistory = [],
  superScrolling = false,
  superScrollSpeed = 100;

const createUI = () => {
  ui = document.createElement("div");
  Object.assign(ui.style, {
    position: "fixed",
    top: "10px",
    right: "10px",
    padding: "20px",
    backgroundColor: config.uiColor,
    color: config.uiFontColor,
    fontFamily: "'Roboto', Arial, sans-serif",
    fontSize: "14px",
    borderRadius: "15px",
    zIndex: "9999",
    transition: "all 0.3s",
    boxShadow: "0 4px 15px rgba(0,0,0,0.2)",
    backdropFilter: "blur(15px)",
    border: "1px solid rgba(255, 255, 255, 0.1)",
    width: "350px",
    height: "auto",
    userSelect: "none",
    overflowY: "auto",
  });

  ui.innerHTML = `
    <div id="acHeader" style="font-weight:bold;margin-bottom:20px;text-align:center;font-size:28px;cursor:pointer;color:${config.accentColor};text-shadow:1px 1px 3px rgba(0,0,0,0.3);">PPHS HUB<span id="collapseBtn">-</span></div>
    <div id="acTabs" style="display:flex;justify-content:space-around;margin-bottom:15px;">
      <div class="acTab" data-tab="main">Main</div>
      <div class="acTab" data-tab="chatbot">Chatbot</div>
      <div class="acTab" data-tab="tools">Tools</div>
      <div class="acTab" data-tab="credits">Credits</div>
    </div>
    <div id="acContent">
      <div id="mainTab" class="acTabContent">
        <div class="acRow"><span>Status:</span><span id="acStatus" class="acValue"></span></div>
        <div class="acRow"><span>Clicks:</span><span id="acClicks" class="acValue">0</span></div>
        <div class="acRow"><span>CPS:</span><span id="acCPS" class="acValue">0</span></div>
        <div class="acRow"><span>Multiplier:</span><span id="acMultiplier" class="acValue">1x</span></div>
        <div class="acRow"><span>Remote:</span><label class="switch"><input type="checkbox" id="remoteToggle"><span class="slider round"></span></label></div>
        <div class="acRow"><label for="desiredCPS">Desired CPS:</label><input type="number" id="desiredCPS" min="1" max="1000" value="${desiredCPS}"></div>
        <div class="acRow"><label for="threadCount">Threads:</label><input type="number" id="threadCount" min="1" max="100" value="${config.threads}"></div>
      </div>
      <div id="chatbotTab" class="acTabContent" style="display:none;">
        <div id="chatbotMessages" style="height: 300px; overflow-y: auto; border: 1px solid ${config.accentColor}; padding: 10px; margin-bottom: 10px; background-color: rgba(255,255,255,0.05); border-radius: 10px; scrollbar-width: thin; scrollbar-color: ${config.accentColor} rgba(255,255,255,0.1);"></div>
        <div style="display: flex; align-items: center;">
          <input type="text" id="chatbotInput" style="flex-grow: 1; margin-right: 5px; background-color: rgba(255,255,255,0.1); border: 1px solid ${config.accentColor}; color: ${config.uiFontColor}; padding: 10px; border-radius: 5px;">
          <button id="chatbotSend" style="background-color: ${config.accentColor}; color: ${config.uiFontColor}; padding: 10px 15px; border-radius: 5px;">Send</button>
        </div>
        <button id="answerDefineBtn" style="background-color: ${config.accentColor}; color: ${config.uiFontColor}; margin-top: 10px; width: 100%; padding: 10px; border-radius: 5px;">Answer/Define</button>
      </div>
      <div id="toolsTab" class="acTabContent" style="display:none;">
        <button id="unblockBtn" style="background-color: ${config.accentColor}; color: ${config.uiFontColor}; width: 100%; padding: 10px; border-radius: 5px; margin-bottom: 10px;">Unblock Website</button>
        <div id="unblockStatus" style="text-align: center; margin-top: 10px;"></div>
        <div class="acRow">
          <span>Super Scroll:</span>
          <label class="switch">
            <input type="checkbox" id="superScrollToggle" checked>
            <span class="slider round"></span>
          </label>
        </div>
        <div class="acRow">
          <label for="superScrollSpeed">Scroll Speed:</label>
          <input type="range" id="superScrollSpeed" min="1" max="100" value="100">
        </div>
        <button id="calculatorBtn" style="background-color: ${config.accentColor}; color: ${config.uiFontColor}; width: 100%; padding: 10px; border-radius: 5px; margin-top: 10px;">Open Calculator</button>
        <button id="notepadBtn" style="background-color: ${config.accentColor}; color: ${config.uiFontColor}; width: 100%; padding: 10px; border-radius: 5px; margin-top: 10px;">Open Notepad</button>
      </div>
      <div id="creditsTab" class="acTabContent" style="display:none;">
        <h2 style="color: ${config.accentColor}; margin-bottom: 20px; text-align: center; font-size: 24px; text-shadow: 1px 1px 3px rgba(0,0,0,0.2);">Meet Our Team</h2>
        <div class="credit-card" style="background: linear-gradient(135deg, ${config.accentColor}, ${config.uiColor}); padding: 20px; border-radius: 15px; margin-bottom: 20px; box-shadow: 0 10px 20px rgba(0,0,0,0.1);">
          <h3 style="color: #fff; margin-bottom: 10px; font-size: 20px;">Retracted info</h3>
          <p style="color: #f0f0f0; font-style: italic;">Lead Developer & Creator</p>
        </div>
        <div class="credit-card" style="background: linear-gradient(135deg, ${config.uiColor}, ${config.accentColor}); padding: 20px; border-radius: 15px; box-shadow: 0 10px 20px rgba(0,0,0,0.1);">
          <h3 style="color: #fff; margin-bottom: 10px; font-size: 20px;">Retracted info</h3>
          <p style="color: #f0f0f0; font-style: italic;">Assistant Developer, Tester & API Manager</p>
        </div>
      </div>
    </div>
    <style>
      #acContent {
        transition: max-height 0.3s ease-out;
        overflow-y: auto;
        max-height: 500px;
      }
      .acRow {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        font-weight: bold;
        background-color: rgba(255,255,255,0.05);
        padding: 15px;
        border-radius: 10px;
      }
      .acValue {
        color: ${config.accentColor};
        font-size: 16px;
      }
      input[type="number"], input[type="text"], input[type="range"] {
        width: 100px;
        background-color: rgba(255,255,255,0.1);
        border: none;
        color: ${config.uiFontColor};
        padding: 8px;
        border-radius: 5px;
        text-align: center;
        font-size: 14px;
      }
      .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
      }
      .switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }
      .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
      }
      .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
      }
      input:checked + .slider {
        background-color: ${config.accentColor};
      }
      input:checked + .slider:before {
        transform: translateX(26px);
      }
      .acTab {
        cursor: pointer;
        padding: 10px 15px;
        background-color: rgba(255,255,255,0.05);
        border-radius: 5px;
        transition: background-color 0.3s;
        font-weight: bold;
      }
      .acTab:hover {
        background-color: rgba(255,255,255,0.1);
      }
      .acTab.active {
        background-color: ${config.accentColor};
        color: ${config.uiColor};
      }
      button {
        padding: 10px 15px;
        background-color: ${config.accentColor};
        border: none;
        color: ${config.uiColor};
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
        font-weight: bold;
        font-size: 14px;
      }
      button:hover {
        background-color: ${config.uiFontColor};
        color: ${config.uiColor};
      }
      #chatbotMessages::-webkit-scrollbar {
        width: 8px;
      }
      #chatbotMessages::-webkit-scrollbar-track {
        background: rgba(255,255,255,0.1);
        border-radius: 10px;
      }
      #chatbotMessages::-webkit-scrollbar-thumb {
        background-color: ${config.accentColor};
        border-radius: 10px;
      }
      .chatMessage {
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 15px;
        max-width: 80%;
        word-wrap: break-word;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        position: relative;
      }
      .chatMessage.user {
        background-color: rgba(255,255,255,0.1);
        color: ${config.accentColor};
        align-self: flex-end;
        margin-left: auto;
      }
      .chatMessage.bot {
        background-color: rgba(0,0,0,0.1);
        color: ${config.uiFontColor};
        align-self: flex-start;
      }
      .copyButton {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: rgba(255,255,255,0.2);
        color: ${config.uiFontColor};
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        font-size: 12px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s;
      }
      .chatMessage:hover .copyButton {
        opacity: 1;
      }
    </style>
  `;

  document.body.appendChild(ui);
  makeDraggable(ui);
  updateUI();

  document.getElementById("acHeader").addEventListener("click", toggleCollapse);
  document.getElementById("desiredCPS").addEventListener("change", updateDesiredCPS);
  document.getElementById("threadCount").addEventListener("change", updateThreadCount);
  document.getElementById("remoteToggle").addEventListener("change", toggleRemoteClicking);
  document.querySelectorAll(".acTab").forEach((tab) => {
    tab.addEventListener("click", () => switchTab(tab.dataset.tab));
  });
  document.getElementById("answerDefineBtn").addEventListener("click", handleAnswerDefine);
  document.getElementById("chatbotSend").addEventListener("click", handleChatbotSend);
  document.getElementById("chatbotInput").addEventListener("keypress", (e) => {
    if (e.key === "Enter") handleChatbotSend();
  });
  document.getElementById("unblockBtn").addEventListener("click", handleUnblock);
  document.getElementById("superScrollToggle").addEventListener("change", toggleSuperScroll);
  document.getElementById("superScrollSpeed").addEventListener("input", updateSuperScrollSpeed);
  document.getElementById("calculatorBtn").addEventListener("click", openCalculator);
  document.getElementById("notepadBtn").addEventListener("click", openNotepad);

  initChatbot();
  toggleSuperScroll({ target: { checked: true } });
};

const makeDraggable = (element) => {
  element.addEventListener("mousedown", (e) => {
    if (e.target === element || e.target.id === "acHeader") {
      dragOffset.x = e.clientX - element.getBoundingClientRect().left;
      dragOffset.y = e.clientY - element.getBoundingClientRect().top;
      document.addEventListener("mousemove", dragMove);
      document.addEventListener("mouseup", dragEnd);
    }
  });
  const dragMove = (e) => {
    element.style.left = e.clientX - dragOffset.x + "px";
    element.style.top = e.clientY - dragOffset.y + "px";
    element.style.right = "auto";
  };

  const dragEnd = () => {
    document.removeEventListener("mousemove", dragMove);
    document.removeEventListener("mouseup", dragEnd);
  };
  };

  const updateUI = () => {
  const now = Date.now();
  if (now - lastUpdateTime < 50) return;
  lastUpdateTime = now;
  const elapsed = (now - startTime) / 1000;
  const cps = clickCount / elapsed;
  document.getElementById("acStatus").textContent = clicking ? "ON" : "OFF";
  document.getElementById("acClicks").textContent = clickCount.toLocaleString();
  document.getElementById("acCPS").textContent = cps.toFixed(2);
  document.getElementById("acMultiplier").textContent = `${clickMultiplier}x`;
  document.getElementById("remoteToggle").checked = remoteClicking;
  ui.style.boxShadow = clicking
    ? `0 0 20px ${config.accentColor}`
    : "0 4px 15px rgba(0,0,0,0.2)";
  };

  const toggleCollapse = () => {
  collapsed = !collapsed;
  const content = document.getElementById("acContent");
  const collapseBtn = document.getElementById("collapseBtn");
  if (collapsed) {
    content.style.maxHeight = "0px";
    collapseBtn.textContent = "+";
  } else {
    content.style.maxHeight = "500px";
    collapseBtn.textContent = "-";
  }
  };

  const updateDesiredCPS = (e) => {
  desiredCPS = Math.max(1, Math.min(1000, parseInt(e.target.value) || 50));
  e.target.value = desiredCPS;
  workers.forEach((worker) =>
    worker.postMessage({ action: "updateCPS", desiredCPS }),
  );
  };

  const updateThreadCount = (e) => {
  const newThreadCount = Math.max(
    1,
    Math.min(100, parseInt(e.target.value) || 8),
  );
  e.target.value = newThreadCount;
  while (workers.length > newThreadCount) {
    workers.pop().terminate();
  }
  while (workers.length < newThreadCount) {
    workers.push(createWorker());
  }
  };

  const simulateClick = (x, y) => {
  const elements = document.elementsFromPoint(x, y);
  for (const element of elements) {
    if (
      element.tagName === "BUTTON" ||
      element.tagName === "A" ||
      element.tagName === "INPUT" ||
      element.onclick ||
      element.getAttribute("role") === "button" ||
      window.getComputedStyle(element).cursor === "pointer"
    ) {
      const rect = element.getBoundingClientRect();
      const event = new MouseEvent("click", {
        view: window,
        bubbles: true,
        cancelable: true,
        clientX: rect.left + rect.width / 2,
        clientY: rect.top + rect.height / 2,
      });
      element.dispatchEvent(event);
      clickCount += clickMultiplier;
      return;
    }
  }
  const event = new MouseEvent("click", {
    view: window,
    bubbles: true,
    cancelable: true,
    clientX: x,
    clientY: y,
  });
  document.elementFromPoint(x, y).dispatchEvent(event);
  clickCount += clickMultiplier;
  };

  const getRandomOffset = () =>
  (Math.random() - 0.5) * 2 * config.remoteClickRadius;

  const remoteClick = () => {
  const x = cursorX + getRandomOffset();
  const y = cursorY + getRandomOffset();
  simulateClick(x, y);
  };

  const burstClick = () => {
  if (clicking && bursting) {
    for (let i = 0; i < config.clicksPerBurst * clickMultiplier; i++) {
      remoteClicking ? remoteClick() : simulateClick(cursorX, cursorY);
    }
    updateUI();
    setTimeout(burstClick, config.burstInterval);
  }
  };

  const autoClick = () => {
  if (clicking && !bursting) {
    remoteClicking ? remoteClick() : simulateClick(cursorX, cursorY);
    updateUI();
    setTimeout(autoClick, 1000 / desiredCPS);
  }
  };

  const toggleClicker = () => {
  clicking = !clicking;
  if (clicking) {
    startTime = Date.now();
    clickCount = 0;
    workers.forEach((worker) =>
      worker.postMessage({
        action: "start",
        remote: remoteClicking,
        desiredCPS,
      }),
    );
    setTimeout(autoClick, config.normalInterval);
  } else {
    workers.forEach((worker) => worker.postMessage({ action: "stop" }));
  }
  updateUI();
  };

  const toggleRemoteClicking = () => {
  remoteClicking = !remoteClicking;
  workers.forEach((worker) =>
    worker.postMessage({ action: "updateRemote", remote: remoteClicking }),
  );
  updateUI();
  };

  const handleMouseMove = (e) => {
  cursorX = e.clientX;
  cursorY = e.clientY;
  workers.forEach((worker) =>
    worker.postMessage({ action: "updatePosition", x: cursorX, y: cursorY }),
  );
  };

  const handleKeyDown = (e) => {
  if (e.key === config.toggleKey) toggleClicker();
  if (e.key === config.burstKey) {
    bursting = true;
    workers.forEach((worker) =>
      worker.postMessage({ action: "burst", state: true }),
    );
    setTimeout(burstClick, config.burstInterval);
  }
  if (e.key === config.incrementKey) {
    clickMultiplier++;
    updateUI();
  }
  if (e.key === config.decrementKey && clickMultiplier > 1) {
    clickMultiplier--;
    updateUI();
  }
  if (e.key === config.remoteClickKey) toggleRemoteClicking();
  };

  const handleKeyUp = (e) => {
  if (e.key === config.burstKey) {
    bursting = false;
    workers.forEach((worker) =>
      worker.postMessage({ action: "burst", state: false }),
    );
  }
  };

  const createWorker = () => {
  const workerCode = `
    let clicking = false, bursting = false, cursorX = 0, cursorY = 0, remoteClicking = false, desiredCPS = 50;
    const remoteClickRadius = ${config.remoteClickRadius};
    const getRandomOffset = () => (Math.random() - 0.5) * 2 * remoteClickRadius;
    const simulateClick = () => {
      if (clicking) {
        const x = remoteClicking ? cursorX + getRandomOffset() : cursorX;
        const y = remoteClicking ? cursorY + getRandomOffset() : cursorY;
        postMessage({action: 'click', x, y});
        if (!bursting) setTimeout(simulateClick, 1000 / desiredCPS);
      }
    };
    onmessage = function(e) {
      switch (e.data.action) {
        case 'start':
          clicking = true;
          remoteClicking = e.data.remote;
          desiredCPS = e.data.desiredCPS;
          simulateClick();
          break;
        case 'stop':
          clicking = false;
          break;
        case 'updatePosition':
          cursorX = e.data.x;
          cursorY = e.data.y;
          break;
        case 'burst':
          bursting = e.data.state;
          if (bursting) {
            for (let i = 0; i < 1000; i++) {
              const x = remoteClicking ? cursorX + getRandomOffset() : cursorX;
              const y = remoteClicking ? cursorY + getRandomOffset() : cursorY;
              postMessage({action: 'click', x, y});
            }
          }
          break;
        case 'updateRemote':
          remoteClicking = e.data.remote;
          break;
        case 'updateCPS':
          desiredCPS = e.data.desiredCPS;
          break;
      }
    };
  `;
  const blob = new Blob([workerCode], { type: "application/javascript" });
  const worker = new Worker(URL.createObjectURL(blob));
  worker.onmessage = function (e) {
    if (e.data.action === "click") simulateClick(e.data.x, e.data.y);
  };
  return worker;
  };

  const switchTab = (tabName) => {
  document
    .querySelectorAll(".acTabContent")
    .forEach((content) => (content.style.display = "none"));
  document.getElementById(`${tabName}Tab`).style.display = "block";
  document
    .querySelectorAll(".acTab")
    .forEach((tab) => tab.classList.remove("active"));
  document
    .querySelector(`.acTab[data-tab="${tabName}"]`)
    .classList.add("active");
  activeTab = tabName;
  };

  const initChatbot = () => {
  const chatbotTab = document.getElementById("chatbotTab");
  const messagesDiv = document.getElementById("chatbotMessages");
  const answerDefineBtn = document.getElementById("answerDefineBtn");
  addMessage(
    "Welcome! You can ask me anything or use 'Answer/Define' for quick explanations.",
  );
  };

  const handleAnswerDefine = async () => {
  const selectedText = window.getSelection().toString().trim();
  if (selectedText) {
    addMessage(`Looking up: "${selectedText}"`, true);
    try {
      const response = await fetch(
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyCtrLq10Lnu_tCgvdiD2nCqcG32uk6L-bY",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  {
                    text: `Respond as a smart high schooler. Give a short, straightforward answer with all important information for: ${selectedText}\n\nPrevious conversation:\n${chatHistory.join("\n")}`,
                  },
                ],
              },
            ],
            safetySettings: [
              {
                category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                threshold: "BLOCK_NONE",
              },
              {
                category: "HARM_CATEGORY_HATE_SPEECH",
                threshold: "BLOCK_NONE",
              },
              {
                category: "HARM_CATEGORY_HARASSMENT",
                threshold: "BLOCK_NONE",
              },
              {
                category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold: "BLOCK_NONE",
              },
            ],
            generationConfig: {
              temperature: 0.7,
              topP: 0.8,
              topK: 40,
              maxOutputTokens: 4096,
            },
          }),
        },
      );
      const data = await response.json();
      if (
        data.candidates &&
        data.candidates[0] &&
        data.candidates[0].content &&
        data.candidates[0].content.parts &&
        data.candidates[0].content.parts[0]
      ) {
        const botResponse = data.candidates[0].content.parts[0].text;
        addMessage(botResponse);
        chatHistory.push(`Human: Define or explain: ${selectedText}`);
        chatHistory.push(`AI: ${botResponse}`);
      } else {
        addMessage("Sorry, I couldn't generate a response.");
      }
    } catch (error) {
      addMessage(
        "Sorry, I encountered an error while processing your request.",
      );
    }
  } else {
    addMessage("Please select some text before clicking 'Answer/Define'.");
  }
  };

  const handleChatbotSend = async () => {
  const input = document.getElementById("chatbotInput");
  const userMessage = input.value.trim();
  if (userMessage) {
    addMessage(userMessage, true);
    chatHistory.push(`Human: ${userMessage}`);
    input.value = "";
    try {
      const response = await fetch(
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyBS3KmZLClK-WMrGZBRHbXk1BErVvSOiBM",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [
                  {
                    text: `Respond as a simple, smart high schooler that helps and completes school answers in all subjects. Give a short but straightforward response including all important information. ${userMessage}\n\nPrevious conversation:\n${chatHistory.join("\n")}`,
                  },
                ],
              },
            ],
            safetySettings: [
              {
                category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                threshold: "BLOCK_NONE",
              },
              {
                category: "HARM_CATEGORY_HATE_SPEECH",
                threshold: "BLOCK_NONE",
              },
              {
                category: "HARM_CATEGORY_HARASSMENT",
                threshold: "BLOCK_NONE",
              },
              {
                category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold: "BLOCK_NONE",
              },
            ],
            generationConfig: {
              temperature: 0.7,
              topP: 0.8,
              topK: 40,
              maxOutputTokens: 4096,
            },
          }),
        },
      );
      const data = await response.json();
      if (
        data.candidates &&
        data.candidates[0] &&
        data.candidates[0].content &&
        data.candidates[0].content.parts &&
        data.candidates[0].content.parts[0]
      ) {
        const botResponse = data.candidates[0].content.parts[0].text;
        addMessage(botResponse);
        chatHistory.push(`AI: ${botResponse}`);
      } else {
        addMessage("Sorry, I couldn't generate a response.");
      }
    } catch (error) {
      addMessage(
        "Sorry, I encountered an error while processing your request.",
      );
    }
  }
  };

  const addMessage = (message, isUser = false) => {
    const messagesDiv = document.getElementById("chatbotMessages");
    const messageDiv = document.createElement("div");
    messageDiv.className = `chatMessage ${isUser ? "user" : "bot"}`;
    messageDiv.textContent = message;
    const copyButton = document.createElement("button");
    copyButton.className = "copyButton";
    copyButton.textContent = "📋";
    copyButton.title = "Copy to clipboard";
    copyButton.addEventListener("click", () => {
      navigator.clipboard.writeText(message).then(() => {
        copyButton.textContent = "✓";
        setTimeout(() => {
          copyButton.textContent = "📋";
        }, 2000);
      });
    });
    messageDiv.appendChild(copyButton);
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  };

  const handleUnblock = () => {
    const statusDiv = document.getElementById("unblockStatus");
    statusDiv.textContent = "Attempting to unblock...";
    setTimeout(() => {
      statusDiv.textContent =
        "Unblock attempt completed. Note: This feature may not work due to network restrictions.";
    }, 2000);
  };

  const toggleSuperScroll = (e) => {
    superScrolling = e.target.checked;
    if (superScrolling) {
      window.addEventListener("wheel", superScroll, { passive: false });
    } else {
      window.removeEventListener("wheel", superScroll);
    }
  };

  const updateSuperScrollSpeed = (e) => {
    superScrollSpeed = parseInt(e.target.value);
  };

  const superScroll = (e) => {
    e.preventDefault();
    window.scrollBy(0, e.deltaY * superScrollSpeed);
  };

  const openCalculator = () => {
    const calculatorWindow = window.open("", "Calculator", "width=300,height=400");
    calculatorWindow.document.body.innerHTML = `
      <div id="calculator">
        <input type="text" id="display" readonly>
        <div id="buttons">
          <button onclick="appendToDisplay('7')">7</button>
          <button onclick="appendToDisplay('8')">8</button>
          <button onclick="appendToDisplay('9')">9</button>
          <button onclick="appendToDisplay('+')">+</button>
          <button onclick="appendToDisplay('4')">4</button>
          <button onclick="appendToDisplay('5')">5</button>
          <button onclick="appendToDisplay('6')">6</button>
          <button onclick="appendToDisplay('-')">-</button>
          <button onclick="appendToDisplay('1')">1</button>
          <button onclick="appendToDisplay('2')">2</button>
          <button onclick="appendToDisplay('3')">3</button>
          <button onclick="appendToDisplay('*')">*</button>
          <button onclick="appendToDisplay('0')">0</button>
          <button onclick="appendToDisplay('.')">.</button>
          <button onclick="calculate()">=</button>
          <button onclick="appendToDisplay('/')">/</button>
          <button onclick="clearDisplay()">C</button>
        </div>
      </div>
      <style>
        #calculator {
          width: 250px;
          margin: 0 auto;
          text-align: center;
          background-color: #f0f0f0;
          border-radius: 10px;
          padding: 10px;
        }
        #display {
          width: 100%;
          height: 40px;
          font-size: 20px;
          margin-bottom: 10px;
          text-align: right;
        }
        #buttons {
          display: grid;
          grid-template-columns: repeat(4, 1fr);
          gap: 5px;
        }
        button {
          width: 100%;
          height: 40px;
          font-size: 18px;
          background-color: #e0e0e0;
          border: none;
          border-radius: 5px;
          cursor: pointer;
        }
        button:hover {
          background-color: #d0d0d0;
        }
      </style>
      <script>
        function appendToDisplay(value) {
          document.getElementById('display').value += value;
        }
        function clearDisplay() {
          document.getElementById('display').value = '';
        }
        function calculate() {
          try {
            document.getElementById('display').value = eval(document.getElementById('display').value);
          } catch (error) {
            document.getElementById('display').value = 'Error';
          }
        }
      </script>
    `;
  };

  const openNotepad = () => {
    const notepadWindow = window.open("", "Notepad", "width=400,height=500");
    notepadWindow.document.body.innerHTML = `
      <div id="notepad">
        <textarea id="notepadText" rows="20" cols="50"></textarea>
        <div id="buttons">
          <button onclick="saveNote()">Save</button>
          <button onclick="loadNote()">Load</button>
        </div>
      </div>
      <style>
        #notepad {
          width: 100%;
          height: 100%;
          display: flex;
          flex-direction: column;
          align-items: center;
          background-color: #f0f0f0;
        }
        #notepadText {
          width: 90%;
          height: 80%;
          margin: 10px;
          font-size: 16px;
          resize: none;
        }
        #buttons {
          display: flex;
          justify-content: space-around;
          width: 100%;
        }
        button {
          width: 100px;
          height: 40px;
          font-size: 18px;
          background-color: #e0e0e0;
          border: none;
          border-radius: 5px;
          cursor: pointer;
        }
        button:hover {
          background-color: #d0d0d0;
        }
      </style>
      <script>
        function saveNote() {
          localStorage.setItem('notepadContent', document.getElementById('notepadText').value);
          alert('Note saved!');
        }
        function loadNote() {
          const savedContent = localStorage.getItem('notepadContent');
          if (savedContent) {
            document.getElementById('notepadText').value = savedContent;
          } else {
            alert('No saved note found.');
          }
        }
      </script>
    `;
  };

  createUI();
  document.addEventListener("mousemove", handleMouseMove);
  document.addEventListener("keydown", handleKeyDown);
  document.addEventListener("keyup", handleKeyUp);
  for (let i = 0; i < config.threads; i++) {
    workers.push(createWorker());
  }
  })();
